# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - uat
      - prf
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "SKIP_BUILD"
    displayName: "Skip Build"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: DATABASE
    displayName: Database to use(oracle[nexi],postgresql[pagopa])
    type: string
    default: postgresql
    values:
      - oracle
      - postgresql
variables:
  USE_POSTGRESQL: ${{ eq( parameters.DATABASE,'postgresql') }}
  USE_ORACLE: ${{ eq( parameters.DATABASE,'oracle') }}
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'
  nameSpace: '$(K8S_NAMESPACE)'
  FILE_CONFIG_PATH_CONFIGAPP: $(Build.SourcesDirectory)/helm/config/${{ parameters.ENV }}/application.properties

  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
    API_SUBSCRIPTION_KEY: $(DEV_API_SUBSCRIPTION_KEY)
    appName: 'cache'
  ${{ if eq(parameters['ENV'], 'it') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
    API_SUBSCRIPTION_KEY: $(DEV_API_SUBSCRIPTION_KEY)
    appName: 'cache-replica'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-uat-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_UAT)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_UAT)"
    API_SUBSCRIPTION_KEY: $(UAT_API_SUBSCRIPTION_KEY)
    appName: 'cache'
  ${{ if eq(parameters['ENV'], 'prf') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-uat-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_UAT)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_UAT)"
    API_SUBSCRIPTION_KEY: $(UAT_API_SUBSCRIPTION_KEY)
    appName: 'cache-replica'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(PROD_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-prod-linux'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_PROD)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_PROD)"
    appName: 'cache'

  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: ${{ variables['Build.SourceBranchName'] }}



resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v3.7.0
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: Release
    jobs:
      - job: make_release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - template: templates/maven-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: $(sourceBranch)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              semver: "${{ parameters.SEMVER }}"

          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Build and Push Docker Image
  - stage: Build
    dependsOn: Release
    condition: and(succeeded(), eq(${{ parameters.SKIP_BUILD }}, false))
    variables:
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - checkout: self
            persistCredentials: true
            clean: true

#          - task: Cache@2
#            inputs:
#              key: 'maven | "$(Agent.OS)" | pom.xml'
#              restoreKeys: |
#                maven | "$(Agent.OS)"
#                maven
#              path: $(MAVEN_CACHE_FOLDER)
#            displayName: Cache Maven local repo

          - script: |
              git checkout $(sourceBranch)
            displayName: Checkout and update branch

          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerRegistryFqdn)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(current_version)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}

  # Deploy on K8s with Helm
  - stage: Deploy
    condition: or(succeeded('Build'),eq(${{ parameters.SKIP_BUILD }}, true))
    dependsOn:
      - Release
      - Build
    variables:
      deploy_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true
                  clean: true

                - script: |
                    git checkout $(sourceBranch)
                  displayName: Checkout and update branch

                - script: |
                    ls -la helm
                  displayName: Check files

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: $(nameSpace)
                    APP_NAME: $(appName)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
                    ARGUMENTS: >-
                      --set pagopa-api-cache-postgresql.enabled="$(USE_POSTGRESQL)"
                      --set pagopa-api-cache-oracle.enabled="$(USE_ORACLE)"
