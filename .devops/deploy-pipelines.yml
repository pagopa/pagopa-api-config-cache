# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-22.04'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: helm_command
      endpoint: 'io-azure-devops-github-ro'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - it
      - uat
      - prf
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: USE_ORACLE
    displayName: Install Oracle Version
    type: boolean
    default: false
  - name: USE_POSTGRESQL
    displayName: Install Postgresql Version
    type: boolean
    default: true
  - name: deployOnly
    displayName: Run only deploy steps
    type: boolean
    default: false
  - name: uninstall
    displayName: Uninstall deployment
    type: boolean
    default: false
  - name: canary
    displayName: Canary deployment
    type: boolean
    default: false

variables:
  SKIP_BUILD: ${{ or( parameters.deployOnly , parameters.uninstall ) }}
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'
  nameSpace: '$(K8S_NAMESPACE)'
  FILE_CONFIG_PATH_CONFIGAPP: $(Build.SourcesDirectory)/helm/config/${{ parameters.ENV }}/application.properties
  ${{ if parameters.canary }}:
    appName: 'cache-canary'
  ${{ else }}:
    appName: 'cache'
  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: '$(deploy-pool-dev)'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
    API_SUBSCRIPTION_KEY: $(DEV_API_SUBSCRIPTION_KEY)
    appFinalName: $(appName)
    github_token_read_packages: '$(github_token_read_packages_dev)'
  ${{ if eq(parameters['ENV'], 'it') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(DEV_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: '$(deploy-pool-dev)'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_DEV)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_DEV)"
    API_SUBSCRIPTION_KEY: $(DEV_API_SUBSCRIPTION_KEY)
    appFinalName: '$(appName)-replica'
    github_token_read_packages: '$(github_token_read_packages_dev)'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: '$(deploy-pool-uat)'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_UAT)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_UAT)"
    API_SUBSCRIPTION_KEY: $(UAT_API_SUBSCRIPTION_KEY)
    appFinalName: $(appName)
    github_token_read_packages: '$(github_token_read_packages_uat)'
  ${{ if eq(parameters['ENV'], 'prf') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(UAT_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: '$(deploy-pool-uat)'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_UAT)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_UAT)"
    API_SUBSCRIPTION_KEY: $(UAT_API_SUBSCRIPTION_KEY)
    appFinalName: '$(appName)-replica'
    github_token_read_packages: '$(github_token_read_packages_uat)'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    dockerRegistryFqdn: $(PROD_CONTAINER_NAMESPACE)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    poolImage: '$(deploy-pool-prod)'
    appInsightsServiceConn: "$(TF_APPINSIGHTS_SERVICE_CONN_PROD)"
    appInsightsResourceId: "$(TF_APPINSIGHTS_RESOURCE_ID_PROD)"
    appFinalName: $(appName)
    github_token_read_packages: '$(github_token_read_packages_prod)'

  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    sourceBranch: ${{ variables['Build.SourceBranchName'] }}

stages:

  # Create a release on GitHub
  - stage: Release
    displayName: Release
    condition: not(${{ variables.SKIP_BUILD }})
    jobs:
      - job: make_release
        workspace:
          clean: all
        steps:
          - bash: |
              buildname="$(Build.BuildNumber) ${{ parameters.ENV }}"
              echo "##vso[build.addbuildtag]${{ parameters.ENV }}"
              echo "##vso[build.updatebuildnumber]$buildname"
          - checkout: self
            clean: true
            persistCredentials: true

          - template: templates/maven-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: $(sourceBranch)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              semver: "${{ parameters.SEMVER }}"
              customHelmStep: |
                VALUES_FILE="helm/values-${{ parameters['ENV'] }}.yaml"
                if [[ -f "$VALUES_FILE" ]]; then
                  yq -i ".basecache.image.tag = \"$(next_version.value)\"" "$VALUES_FILE"
                  git add "$VALUES_FILE"
                fi
  # Create a release on GitHub
  - stage: GetVersion
    dependsOn: Release
    condition: and(not(or(failed(), canceled())), not( ${{ parameters.uninstall }} ) )
    jobs:
      - job: get_version
        steps:
          - checkout: self
          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Build and Push Docker Image
  - stage: Build
    dependsOn: GetVersion
    condition: and(succeeded(), not(${{ variables.SKIP_BUILD }}))
    variables:
      current_version: $[ stageDependencies.GetVersion.get_version.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        workspace:
          clean: all
        steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - script: |
              git checkout $(sourceBranch)
            displayName: Checkout and update branch

          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(dockerRegistryServiceConnection)
              CONTAINER_REGISTRY_FQDN: $(dockerRegistryFqdn)
              DOCKER_IMAGE_NAME: $(imageRepository)
              DOCKER_IMAGE_TAG: $(current_version)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
              DOCKER_BUILD_ARGS: --build-arg github_token="$(github_token_read_packages)"

  # Deploy on K8s with Helm
  - stage: Deploy
    condition: or(succeeded(), ${{ variables.SKIP_BUILD }})
    dependsOn:
      - Release
      - GetVersion
      - Build
    variables:
      deploy_version: $[ stageDependencies.GetVersion.get_version.outputs['current_version.value'] ]
    jobs:
      - job: manual_approval
        condition: or(and( ${{ parameters.uninstall }}, not(${{ parameters.canary }})), eq('${{ parameters.ENV }}', 'prod') )
        pool: server
        displayName: "Manual approval"
        timeoutInMinutes: 70
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 60
            inputs:
              notifyUsers: |
                $(APPROVE_NOTIFY_GROUP)
                $(APPROVE_NOTIFY_ADMIN)
              instructions: "Please approve or reject ${{ parameters['ENV'] }} \n uninstall:${{ parameters.uninstall }},canary ${{ parameters.canary }}"
              onTimeout: 'reject'
      - deployment: "deploy"
        dependsOn: manual_approval
        condition: in(dependencies.manual_approval.result, 'Succeeded', 'Skipped')
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true
                  fetchDepth: 1

                - script: |
                    echo "deploy version is $(deploy_version)"
                    git checkout $(sourceBranch)
                  displayName: Checkout and update branch

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - ${{ if parameters.uninstall }}:
                  - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                    parameters:
                      COMMAND: "uninstall"
                      DO_DEPLOY: true
                      ENV: ${{ parameters['ENV'] }}
                      KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                      NAMESPACE: $(nameSpace)
                      APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                      APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
                      ARGUMENTS: $(appFinalName)
                - ${{ if not( parameters.uninstall ) }}:
                    - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                      parameters:
                        DO_DEPLOY: true
                        ENV: ${{ parameters['ENV'] }}
                        KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                        NAMESPACE: $(nameSpace)
                        APP_NAME: $(appFinalName)
                        VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                        DEPLOY_VERSION: $(deploy_version)
                        APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                        APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
                        ARGUMENTS: >-
                          --set postgresql.image.tag=$(deploy_version)
                          --set postgresql.enabled="${{ parameters.USE_POSTGRESQL }}"
                          --set postgresql.canaryDelivery.create="${{ parameters.canary }}"
                          --set oracle.image.tag=$(deploy_version)
                          --set oracle.enabled="${{ parameters.USE_ORACLE }}"
                          --set oracle.canaryDelivery.create="${{ parameters.canary }}"
